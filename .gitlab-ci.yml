stages:
  - build
  - deploy
docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$DOCKER_USER" -p "DOCKER_PASSWORD"
  script:
    - echo "Build Docker Images For Backend App ..."
    - docker build --pull -t panjirizk/backend-challenge:$CI_COMMIT_SHORT_SHA -f backend/Dockerfile .
    - docker push panjirizk/backend-challenge:$CI_COMMIT_SHORT_SHA
    - echo "Build Docker Images for Frontend App ..."
    - docker build  -f frontend/Dockerfile -t panjirizk/frontend-challenge:$CI_COMMIT_SHORT_SHA .
    - docker push panjirizk/frontend-challenge:$CI_COMMIT_SHORT_SHA
  # only: main
deploy-development:
  stage: deploy
  image: alpine
  services:
    - docker:dind
  before_script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$DEV_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no $HOST_USER@$IP_ADDRESS_DEV "rm -rf  binar/ webserver/ ssl-certificate/"
    - ssh -o StrictHostKeyChecking=no $HOST_USER@$IP_ADDRESS_DEV "mkdir  binar webserver"
    - scp -o StrictHostKeyChecking=no docker-compose-development.yml  $HOST_USER@$IP_ADDRESS_DEV:binar
    - scp -o StrictHostKeyChecking=no nginx/dev.conf dev-nginx-ssl.sh $HOST_USER@$IP_ADDRESS_DEV:webserver
    - ssh -o StrictHostKeyChecking=no $HOST_USER@$IP_ADDRESS_DEV " cd ~/binar && mkdir database"
    - scp -o StrictHostKeyChecking=no database/crud_db.sql $HOST_USER@$IP_ADDRESS_DEV:binar/database/
    - echo "sukses"
    - ssh -o StrictHostKeyChecking=no $HOST_USER@$IP_ADDRESS_DEV "cd ~/binar/ && IMAGE_TAG=$CI_COMMIT_SHORT_SHA
      docker compose -f docker-compose-development.yml up -d --force-recreate"
    - echo "success docker compose already up"
    - ssh -o StrictHostKeyChecking=no $HOST_USER@$IP_ADDRESS_DEV "bash webserver/dev-nginx-ssl.sh"
    - echo "running bash script to install nginx and conf ssl success"

deploy-production:
  stage: deploy
  image: alpine
  services:
    - docker:dind
  before_script:
    - apk add openssh-client
    - apk add gettext
    - eval $(ssh-agent -s)
    - echo "$PROD_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no $HOST_USER@$IP_ADDRESS_PROD "rm -rf  binar/ webserver/ ssl-certificate/"
    - envsubst < .env.example > .env
    - ssh -o StrictHostKeyChecking=no $HOST_USER@$IP_ADDRESS_PROD "mkdir  binar webserver"
    - scp -o StrictHostKeyChecking=no .env docker-compose.yml $HOST_USER@$IP_ADDRESS_PROD:binar
    - scp -o StrictHostKeyChecking=no prod-nginx-ssl.sh nginx/prod.conf $HOST_USER@$IP_ADDRESS_PROD:webserver
    - ssh -o StrictHostKeyChecking=no $HOST_USER@$IP_ADDRESS_PROD "cd ~/binar &&
      IMAGE_TAG=$CI_COMMIT_SHORT_SHA
      docker compose up -d --force-recreate"
    - echo "success docker compose already up"
    - ssh -o StrictHostKeyChecking=no $HOST_USER@$IP_ADDRESS_PROD "bash webserver/prod-nginx-ssl.sh"
    - echo "running bash script to install nginx and conf ssl success"
  when: manual